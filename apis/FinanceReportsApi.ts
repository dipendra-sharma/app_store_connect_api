/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface FinanceReportsGetCollectionRequest {
    filterVendorNumber: Array<string>;
    filterReportType: Array<FinanceReportsGetCollectionFilterReportTypeEnum>;
    filterRegionCode: Array<string>;
    filterReportDate: Array<string>;
}

/**
 * 
 */
export class FinanceReportsApi extends runtime.BaseAPI {

    /**
     */
    async financeReportsGetCollectionRaw(requestParameters: FinanceReportsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['filterVendorNumber'] == null) {
            throw new runtime.RequiredError(
                'filterVendorNumber',
                'Required parameter "filterVendorNumber" was null or undefined when calling financeReportsGetCollection().'
            );
        }

        if (requestParameters['filterReportType'] == null) {
            throw new runtime.RequiredError(
                'filterReportType',
                'Required parameter "filterReportType" was null or undefined when calling financeReportsGetCollection().'
            );
        }

        if (requestParameters['filterRegionCode'] == null) {
            throw new runtime.RequiredError(
                'filterRegionCode',
                'Required parameter "filterRegionCode" was null or undefined when calling financeReportsGetCollection().'
            );
        }

        if (requestParameters['filterReportDate'] == null) {
            throw new runtime.RequiredError(
                'filterReportDate',
                'Required parameter "filterReportDate" was null or undefined when calling financeReportsGetCollection().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filterVendorNumber'] != null) {
            queryParameters['filter[vendorNumber]'] = requestParameters['filterVendorNumber']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['filterReportType'] != null) {
            queryParameters['filter[reportType]'] = requestParameters['filterReportType']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['filterRegionCode'] != null) {
            queryParameters['filter[regionCode]'] = requestParameters['filterRegionCode']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['filterReportDate'] != null) {
            queryParameters['filter[reportDate]'] = requestParameters['filterReportDate']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/financeReports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async financeReportsGetCollection(requestParameters: FinanceReportsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.financeReportsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const FinanceReportsGetCollectionFilterReportTypeEnum = {
    Financial: 'FINANCIAL',
    FinanceDetail: 'FINANCE_DETAIL'
} as const;
export type FinanceReportsGetCollectionFilterReportTypeEnum = typeof FinanceReportsGetCollectionFilterReportTypeEnum[keyof typeof FinanceReportsGetCollectionFilterReportTypeEnum];
