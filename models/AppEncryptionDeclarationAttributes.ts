/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Platform } from './Platform';
import {
    PlatformFromJSON,
    PlatformFromJSONTyped,
    PlatformToJSON,
    PlatformToJSONTyped,
} from './Platform';
import type { AppEncryptionDeclarationState } from './AppEncryptionDeclarationState';
import {
    AppEncryptionDeclarationStateFromJSON,
    AppEncryptionDeclarationStateFromJSONTyped,
    AppEncryptionDeclarationStateToJSON,
    AppEncryptionDeclarationStateToJSONTyped,
} from './AppEncryptionDeclarationState';

/**
 * 
 * @export
 * @interface AppEncryptionDeclarationAttributes
 */
export interface AppEncryptionDeclarationAttributes {
    /**
     * 
     * @type {string}
     * @memberof AppEncryptionDeclarationAttributes
     */
    appDescription?: string;
    /**
     * 
     * @type {Date}
     * @memberof AppEncryptionDeclarationAttributes
     */
    createdDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof AppEncryptionDeclarationAttributes
     * @deprecated
     */
    usesEncryption?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AppEncryptionDeclarationAttributes
     */
    exempt?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AppEncryptionDeclarationAttributes
     */
    containsProprietaryCryptography?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AppEncryptionDeclarationAttributes
     */
    containsThirdPartyCryptography?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AppEncryptionDeclarationAttributes
     */
    availableOnFrenchStore?: boolean;
    /**
     * 
     * @type {Platform}
     * @memberof AppEncryptionDeclarationAttributes
     */
    platform?: Platform;
    /**
     * 
     * @type {Date}
     * @memberof AppEncryptionDeclarationAttributes
     * @deprecated
     */
    uploadedDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof AppEncryptionDeclarationAttributes
     * @deprecated
     */
    documentUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof AppEncryptionDeclarationAttributes
     * @deprecated
     */
    documentName?: string;
    /**
     * 
     * @type {string}
     * @memberof AppEncryptionDeclarationAttributes
     * @deprecated
     */
    documentType?: string;
    /**
     * 
     * @type {AppEncryptionDeclarationState}
     * @memberof AppEncryptionDeclarationAttributes
     */
    appEncryptionDeclarationState?: AppEncryptionDeclarationState;
    /**
     * 
     * @type {string}
     * @memberof AppEncryptionDeclarationAttributes
     */
    codeValue?: string;
}



/**
 * Check if a given object implements the AppEncryptionDeclarationAttributes interface.
 */
export function instanceOfAppEncryptionDeclarationAttributes(value: object): value is AppEncryptionDeclarationAttributes {
    return true;
}

export function AppEncryptionDeclarationAttributesFromJSON(json: any): AppEncryptionDeclarationAttributes {
    return AppEncryptionDeclarationAttributesFromJSONTyped(json, false);
}

export function AppEncryptionDeclarationAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppEncryptionDeclarationAttributes {
    if (json == null) {
        return json;
    }
    return {
        
        'appDescription': json['appDescription'] == null ? undefined : json['appDescription'],
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'usesEncryption': json['usesEncryption'] == null ? undefined : json['usesEncryption'],
        'exempt': json['exempt'] == null ? undefined : json['exempt'],
        'containsProprietaryCryptography': json['containsProprietaryCryptography'] == null ? undefined : json['containsProprietaryCryptography'],
        'containsThirdPartyCryptography': json['containsThirdPartyCryptography'] == null ? undefined : json['containsThirdPartyCryptography'],
        'availableOnFrenchStore': json['availableOnFrenchStore'] == null ? undefined : json['availableOnFrenchStore'],
        'platform': json['platform'] == null ? undefined : PlatformFromJSON(json['platform']),
        'uploadedDate': json['uploadedDate'] == null ? undefined : (new Date(json['uploadedDate'])),
        'documentUrl': json['documentUrl'] == null ? undefined : json['documentUrl'],
        'documentName': json['documentName'] == null ? undefined : json['documentName'],
        'documentType': json['documentType'] == null ? undefined : json['documentType'],
        'appEncryptionDeclarationState': json['appEncryptionDeclarationState'] == null ? undefined : AppEncryptionDeclarationStateFromJSON(json['appEncryptionDeclarationState']),
        'codeValue': json['codeValue'] == null ? undefined : json['codeValue'],
    };
}

export function AppEncryptionDeclarationAttributesToJSON(json: any): AppEncryptionDeclarationAttributes {
    return AppEncryptionDeclarationAttributesToJSONTyped(json, false);
}

export function AppEncryptionDeclarationAttributesToJSONTyped(value?: AppEncryptionDeclarationAttributes | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'appDescription': value['appDescription'],
        'createdDate': value['createdDate'] == null ? undefined : ((value['createdDate']).toISOString()),
        'usesEncryption': value['usesEncryption'],
        'exempt': value['exempt'],
        'containsProprietaryCryptography': value['containsProprietaryCryptography'],
        'containsThirdPartyCryptography': value['containsThirdPartyCryptography'],
        'availableOnFrenchStore': value['availableOnFrenchStore'],
        'platform': PlatformToJSON(value['platform']),
        'uploadedDate': value['uploadedDate'] == null ? undefined : ((value['uploadedDate']).toISOString()),
        'documentUrl': value['documentUrl'],
        'documentName': value['documentName'],
        'documentType': value['documentType'],
        'appEncryptionDeclarationState': AppEncryptionDeclarationStateToJSON(value['appEncryptionDeclarationState']),
        'codeValue': value['codeValue'],
    };
}

