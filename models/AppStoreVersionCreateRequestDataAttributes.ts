
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Platform } from './Platform';
import {
    PlatformFromJSON,
    PlatformFromJSONTyped,
    PlatformToJSON,
    PlatformToJSONTyped,
} from './Platform';

/**
 * 
 * @export
 * @interface AppStoreVersionCreateRequestDataAttributes
 */
export interface AppStoreVersionCreateRequestDataAttributes {
    /**
     * 
     * @type {Platform}
     * @memberof AppStoreVersionCreateRequestDataAttributes
     */
    platform: Platform;
    /**
     * 
     * @type {string}
     * @memberof AppStoreVersionCreateRequestDataAttributes
     */
    versionString: string;
    /**
     * 
     * @type {string}
     * @memberof AppStoreVersionCreateRequestDataAttributes
     */
    copyright?: string;
    /**
     * 
     * @type {string}
     * @memberof AppStoreVersionCreateRequestDataAttributes
     */
    reviewType?: AppStoreVersionCreateRequestDataAttributesReviewTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AppStoreVersionCreateRequestDataAttributes
     */
    releaseType?: AppStoreVersionCreateRequestDataAttributesReleaseTypeEnum;
    /**
     * 
     * @type {Date}
     * @memberof AppStoreVersionCreateRequestDataAttributes
     */
    earliestReleaseDate?: Date;
}


/**
 * @export
 */
export const AppStoreVersionCreateRequestDataAttributesReviewTypeEnum = {
    AppStore: 'APP_STORE',
    Notarization: 'NOTARIZATION'
} as const;
export type AppStoreVersionCreateRequestDataAttributesReviewTypeEnum = typeof AppStoreVersionCreateRequestDataAttributesReviewTypeEnum[keyof typeof AppStoreVersionCreateRequestDataAttributesReviewTypeEnum];

/**
 * @export
 */
export const AppStoreVersionCreateRequestDataAttributesReleaseTypeEnum = {
    Manual: 'MANUAL',
    AfterApproval: 'AFTER_APPROVAL',
    Scheduled: 'SCHEDULED'
} as const;
export type AppStoreVersionCreateRequestDataAttributesReleaseTypeEnum = typeof AppStoreVersionCreateRequestDataAttributesReleaseTypeEnum[keyof typeof AppStoreVersionCreateRequestDataAttributesReleaseTypeEnum];


/**
 * Check if a given object implements the AppStoreVersionCreateRequestDataAttributes interface.
 */
export function instanceOfAppStoreVersionCreateRequestDataAttributes(value: object): value is AppStoreVersionCreateRequestDataAttributes {
    if (!('platform' in value) || value['platform'] === undefined) return false;
    if (!('versionString' in value) || value['versionString'] === undefined) return false;
    return true;
}

export function AppStoreVersionCreateRequestDataAttributesFromJSON(json: any): AppStoreVersionCreateRequestDataAttributes {
    return AppStoreVersionCreateRequestDataAttributesFromJSONTyped(json, false);
}

export function AppStoreVersionCreateRequestDataAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppStoreVersionCreateRequestDataAttributes {
    if (json == null) {
        return json;
    }
    return {
        
        'platform': PlatformFromJSON(json['platform']),
        'versionString': json['versionString'],
        'copyright': json['copyright'] == null ? undefined : json['copyright'],
        'reviewType': json['reviewType'] == null ? undefined : json['reviewType'],
        'releaseType': json['releaseType'] == null ? undefined : json['releaseType'],
        'earliestReleaseDate': json['earliestReleaseDate'] == null ? undefined : (new Date(json['earliestReleaseDate'])),
    };
}

export function AppStoreVersionCreateRequestDataAttributesToJSON(json: any): AppStoreVersionCreateRequestDataAttributes {
    return AppStoreVersionCreateRequestDataAttributesToJSONTyped(json, false);
}

export function AppStoreVersionCreateRequestDataAttributesToJSONTyped(value?: AppStoreVersionCreateRequestDataAttributes | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'platform': PlatformToJSON(value['platform']),
        'versionString': value['versionString'],
        'copyright': value['copyright'],
        'reviewType': value['reviewType'],
        'releaseType': value['releaseType'],
        'earliestReleaseDate': value['earliestReleaseDate'] == null ? undefined : ((value['earliestReleaseDate']).toISOString()),
    };
}

