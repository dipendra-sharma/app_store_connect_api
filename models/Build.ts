/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BuildRelationships } from './BuildRelationships';
import {
    BuildRelationshipsFromJSON,
    BuildRelationshipsFromJSONTyped,
    BuildRelationshipsToJSON,
    BuildRelationshipsToJSONTyped,
} from './BuildRelationships';
import type { BuildAttributes } from './BuildAttributes';
import {
    BuildAttributesFromJSON,
    BuildAttributesFromJSONTyped,
    BuildAttributesToJSON,
    BuildAttributesToJSONTyped,
} from './BuildAttributes';
import type { ResourceLinks } from './ResourceLinks';
import {
    ResourceLinksFromJSON,
    ResourceLinksFromJSONTyped,
    ResourceLinksToJSON,
    ResourceLinksToJSONTyped,
} from './ResourceLinks';

/**
 * 
 * @export
 * @interface Build
 */
export interface Build {
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    type: BuildTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    id: string;
    /**
     * 
     * @type {BuildAttributes}
     * @memberof Build
     */
    attributes?: BuildAttributes;
    /**
     * 
     * @type {BuildRelationships}
     * @memberof Build
     */
    relationships?: BuildRelationships;
    /**
     * 
     * @type {ResourceLinks}
     * @memberof Build
     */
    links?: ResourceLinks;
}


/**
 * @export
 */
export const BuildTypeEnum = {
    Builds: 'builds'
} as const;
export type BuildTypeEnum = typeof BuildTypeEnum[keyof typeof BuildTypeEnum];


/**
 * Check if a given object implements the Build interface.
 */
export function instanceOfBuild(value: object): value is Build {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function BuildFromJSON(json: any): Build {
    return BuildFromJSONTyped(json, false);
}

export function BuildFromJSONTyped(json: any, ignoreDiscriminator: boolean): Build {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'id': json['id'],
        'attributes': json['attributes'] == null ? undefined : BuildAttributesFromJSON(json['attributes']),
        'relationships': json['relationships'] == null ? undefined : BuildRelationshipsFromJSON(json['relationships']),
        'links': json['links'] == null ? undefined : ResourceLinksFromJSON(json['links']),
    };
}

export function BuildToJSON(json: any): Build {
    return BuildToJSONTyped(json, false);
}

export function BuildToJSONTyped(value?: Build | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'id': value['id'],
        'attributes': BuildAttributesToJSON(value['attributes']),
        'relationships': BuildRelationshipsToJSON(value['relationships']),
        'links': ResourceLinksToJSON(value['links']),
    };
}

