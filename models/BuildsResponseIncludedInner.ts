
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { App } from './App';
import {
    instanceOfApp,
    AppFromJSON,
    AppFromJSONTyped,
    AppToJSON,
} from './App';
import type { AppEncryptionDeclaration } from './AppEncryptionDeclaration';
import {
    instanceOfAppEncryptionDeclaration,
    AppEncryptionDeclarationFromJSON,
    AppEncryptionDeclarationFromJSONTyped,
    AppEncryptionDeclarationToJSON,
} from './AppEncryptionDeclaration';
import type { AppStoreVersion } from './AppStoreVersion';
import {
    instanceOfAppStoreVersion,
    AppStoreVersionFromJSON,
    AppStoreVersionFromJSONTyped,
    AppStoreVersionToJSON,
} from './AppStoreVersion';
import type { BetaAppReviewSubmission } from './BetaAppReviewSubmission';
import {
    instanceOfBetaAppReviewSubmission,
    BetaAppReviewSubmissionFromJSON,
    BetaAppReviewSubmissionFromJSONTyped,
    BetaAppReviewSubmissionToJSON,
} from './BetaAppReviewSubmission';
import type { BetaBuildLocalization } from './BetaBuildLocalization';
import {
    instanceOfBetaBuildLocalization,
    BetaBuildLocalizationFromJSON,
    BetaBuildLocalizationFromJSONTyped,
    BetaBuildLocalizationToJSON,
} from './BetaBuildLocalization';
import type { BetaGroup } from './BetaGroup';
import {
    instanceOfBetaGroup,
    BetaGroupFromJSON,
    BetaGroupFromJSONTyped,
    BetaGroupToJSON,
} from './BetaGroup';
import type { BetaTester } from './BetaTester';
import {
    instanceOfBetaTester,
    BetaTesterFromJSON,
    BetaTesterFromJSONTyped,
    BetaTesterToJSON,
} from './BetaTester';
import type { BuildBetaDetail } from './BuildBetaDetail';
import {
    instanceOfBuildBetaDetail,
    BuildBetaDetailFromJSON,
    BuildBetaDetailFromJSONTyped,
    BuildBetaDetailToJSON,
} from './BuildBetaDetail';
import type { BuildBundle } from './BuildBundle';
import {
    instanceOfBuildBundle,
    BuildBundleFromJSON,
    BuildBundleFromJSONTyped,
    BuildBundleToJSON,
} from './BuildBundle';
import type { BuildIcon } from './BuildIcon';
import {
    instanceOfBuildIcon,
    BuildIconFromJSON,
    BuildIconFromJSONTyped,
    BuildIconToJSON,
} from './BuildIcon';
import type { PrereleaseVersion } from './PrereleaseVersion';
import {
    instanceOfPrereleaseVersion,
    PrereleaseVersionFromJSON,
    PrereleaseVersionFromJSONTyped,
    PrereleaseVersionToJSON,
} from './PrereleaseVersion';

/**
 * @type BuildsResponseIncludedInner
 * 
 * @export
 */
export type BuildsResponseIncludedInner = App | AppEncryptionDeclaration | AppStoreVersion | BetaAppReviewSubmission | BetaBuildLocalization | BetaGroup | BetaTester | BuildBetaDetail | BuildBundle | BuildIcon | PrereleaseVersion;

export function BuildsResponseIncludedInnerFromJSON(json: any): BuildsResponseIncludedInner {
    return BuildsResponseIncludedInnerFromJSONTyped(json, false);
}

export function BuildsResponseIncludedInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): BuildsResponseIncludedInner {
    if (json == null) {
        return json;
    }
    if (instanceOfApp(json)) {
        return AppFromJSONTyped(json, true);
    }
    if (instanceOfAppEncryptionDeclaration(json)) {
        return AppEncryptionDeclarationFromJSONTyped(json, true);
    }
    if (instanceOfAppStoreVersion(json)) {
        return AppStoreVersionFromJSONTyped(json, true);
    }
    if (instanceOfBetaAppReviewSubmission(json)) {
        return BetaAppReviewSubmissionFromJSONTyped(json, true);
    }
    if (instanceOfBetaBuildLocalization(json)) {
        return BetaBuildLocalizationFromJSONTyped(json, true);
    }
    if (instanceOfBetaGroup(json)) {
        return BetaGroupFromJSONTyped(json, true);
    }
    if (instanceOfBetaTester(json)) {
        return BetaTesterFromJSONTyped(json, true);
    }
    if (instanceOfBuildBetaDetail(json)) {
        return BuildBetaDetailFromJSONTyped(json, true);
    }
    if (instanceOfBuildBundle(json)) {
        return BuildBundleFromJSONTyped(json, true);
    }
    if (instanceOfBuildIcon(json)) {
        return BuildIconFromJSONTyped(json, true);
    }
    if (instanceOfPrereleaseVersion(json)) {
        return PrereleaseVersionFromJSONTyped(json, true);
    }

    return {} as any;
}

export function BuildsResponseIncludedInnerToJSON(json: any): any {
    return BuildsResponseIncludedInnerToJSONTyped(json, false);
}

export function BuildsResponseIncludedInnerToJSONTyped(value?: BuildsResponseIncludedInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (instanceOfApp(value)) {
        return AppToJSON(value as App);
    }
    if (instanceOfAppEncryptionDeclaration(value)) {
        return AppEncryptionDeclarationToJSON(value as AppEncryptionDeclaration);
    }
    if (instanceOfAppStoreVersion(value)) {
        return AppStoreVersionToJSON(value as AppStoreVersion);
    }
    if (instanceOfBetaAppReviewSubmission(value)) {
        return BetaAppReviewSubmissionToJSON(value as BetaAppReviewSubmission);
    }
    if (instanceOfBetaBuildLocalization(value)) {
        return BetaBuildLocalizationToJSON(value as BetaBuildLocalization);
    }
    if (instanceOfBetaGroup(value)) {
        return BetaGroupToJSON(value as BetaGroup);
    }
    if (instanceOfBetaTester(value)) {
        return BetaTesterToJSON(value as BetaTester);
    }
    if (instanceOfBuildBetaDetail(value)) {
        return BuildBetaDetailToJSON(value as BuildBetaDetail);
    }
    if (instanceOfBuildBundle(value)) {
        return BuildBundleToJSON(value as BuildBundle);
    }
    if (instanceOfBuildIcon(value)) {
        return BuildIconToJSON(value as BuildIcon);
    }
    if (instanceOfPrereleaseVersion(value)) {
        return PrereleaseVersionToJSON(value as PrereleaseVersion);
    }

    return {};
}

