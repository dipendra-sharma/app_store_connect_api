/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CiStartConditionFileMatcher } from './CiStartConditionFileMatcher';
import {
    CiStartConditionFileMatcherFromJSON,
    CiStartConditionFileMatcherFromJSONTyped,
    CiStartConditionFileMatcherToJSON,
    CiStartConditionFileMatcherToJSONTyped,
} from './CiStartConditionFileMatcher';

/**
 * 
 * @export
 * @interface CiFilesAndFoldersRule
 */
export interface CiFilesAndFoldersRule {
    /**
     * 
     * @type {string}
     * @memberof CiFilesAndFoldersRule
     */
    mode?: CiFilesAndFoldersRuleModeEnum;
    /**
     * 
     * @type {Array<CiStartConditionFileMatcher>}
     * @memberof CiFilesAndFoldersRule
     */
    matchers?: Array<CiStartConditionFileMatcher>;
}


/**
 * @export
 */
export const CiFilesAndFoldersRuleModeEnum = {
    StartIfAnyFileMatches: 'START_IF_ANY_FILE_MATCHES',
    DoNotStartIfAllFilesMatch: 'DO_NOT_START_IF_ALL_FILES_MATCH'
} as const;
export type CiFilesAndFoldersRuleModeEnum = typeof CiFilesAndFoldersRuleModeEnum[keyof typeof CiFilesAndFoldersRuleModeEnum];


/**
 * Check if a given object implements the CiFilesAndFoldersRule interface.
 */
export function instanceOfCiFilesAndFoldersRule(value: object): value is CiFilesAndFoldersRule {
    return true;
}

export function CiFilesAndFoldersRuleFromJSON(json: any): CiFilesAndFoldersRule {
    return CiFilesAndFoldersRuleFromJSONTyped(json, false);
}

export function CiFilesAndFoldersRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): CiFilesAndFoldersRule {
    if (json == null) {
        return json;
    }
    return {
        
        'mode': json['mode'] == null ? undefined : json['mode'],
        'matchers': json['matchers'] == null ? undefined : ((json['matchers'] as Array<any>).map(CiStartConditionFileMatcherFromJSON)),
    };
}

export function CiFilesAndFoldersRuleToJSON(json: any): CiFilesAndFoldersRule {
    return CiFilesAndFoldersRuleToJSONTyped(json, false);
}

export function CiFilesAndFoldersRuleToJSONTyped(value?: CiFilesAndFoldersRule | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'mode': value['mode'],
        'matchers': value['matchers'] == null ? undefined : ((value['matchers'] as Array<any>).map(CiStartConditionFileMatcherToJSON)),
    };
}

