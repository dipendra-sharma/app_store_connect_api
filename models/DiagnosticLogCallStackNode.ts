
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DiagnosticLogCallStackNode
 */
export interface DiagnosticLogCallStackNode {
    /**
     * 
     * @type {number}
     * @memberof DiagnosticLogCallStackNode
     */
    sampleCount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DiagnosticLogCallStackNode
     */
    isBlameFrame?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    symbolName?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    insightsCategory?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    offsetIntoSymbol?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    binaryName?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    fileName?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    binaryUUID?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    lineNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    offsetIntoBinaryTextSegment?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    rawFrame?: string;
    /**
     * 
     * @type {Array<DiagnosticLogCallStackNode>}
     * @memberof DiagnosticLogCallStackNode
     */
    subFrames?: Array<DiagnosticLogCallStackNode>;
}

/**
 * Check if a given object implements the DiagnosticLogCallStackNode interface.
 */
export function instanceOfDiagnosticLogCallStackNode(value: object): value is DiagnosticLogCallStackNode {
    return true;
}

export function DiagnosticLogCallStackNodeFromJSON(json: any): DiagnosticLogCallStackNode {
    return DiagnosticLogCallStackNodeFromJSONTyped(json, false);
}

export function DiagnosticLogCallStackNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DiagnosticLogCallStackNode {
    if (json == null) {
        return json;
    }
    return {
        
        'sampleCount': json['sampleCount'] == null ? undefined : json['sampleCount'],
        'isBlameFrame': json['isBlameFrame'] == null ? undefined : json['isBlameFrame'],
        'symbolName': json['symbolName'] == null ? undefined : json['symbolName'],
        'insightsCategory': json['insightsCategory'] == null ? undefined : json['insightsCategory'],
        'offsetIntoSymbol': json['offsetIntoSymbol'] == null ? undefined : json['offsetIntoSymbol'],
        'binaryName': json['binaryName'] == null ? undefined : json['binaryName'],
        'fileName': json['fileName'] == null ? undefined : json['fileName'],
        'binaryUUID': json['binaryUUID'] == null ? undefined : json['binaryUUID'],
        'lineNumber': json['lineNumber'] == null ? undefined : json['lineNumber'],
        'address': json['address'] == null ? undefined : json['address'],
        'offsetIntoBinaryTextSegment': json['offsetIntoBinaryTextSegment'] == null ? undefined : json['offsetIntoBinaryTextSegment'],
        'rawFrame': json['rawFrame'] == null ? undefined : json['rawFrame'],
        'subFrames': json['subFrames'] == null ? undefined : ((json['subFrames'] as Array<any>).map(DiagnosticLogCallStackNodeFromJSON)),
    };
}

export function DiagnosticLogCallStackNodeToJSON(json: any): DiagnosticLogCallStackNode {
    return DiagnosticLogCallStackNodeToJSONTyped(json, false);
}

export function DiagnosticLogCallStackNodeToJSONTyped(value?: DiagnosticLogCallStackNode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sampleCount': value['sampleCount'],
        'isBlameFrame': value['isBlameFrame'],
        'symbolName': value['symbolName'],
        'insightsCategory': value['insightsCategory'],
        'offsetIntoSymbol': value['offsetIntoSymbol'],
        'binaryName': value['binaryName'],
        'fileName': value['fileName'],
        'binaryUUID': value['binaryUUID'],
        'lineNumber': value['lineNumber'],
        'address': value['address'],
        'offsetIntoBinaryTextSegment': value['offsetIntoBinaryTextSegment'],
        'rawFrame': value['rawFrame'],
        'subFrames': value['subFrames'] == null ? undefined : ((value['subFrames'] as Array<any>).map(DiagnosticLogCallStackNodeToJSON)),
    };
}

