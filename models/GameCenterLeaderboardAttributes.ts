/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GameCenterLeaderboardFormatter } from './GameCenterLeaderboardFormatter';
import {
    GameCenterLeaderboardFormatterFromJSON,
    GameCenterLeaderboardFormatterFromJSONTyped,
    GameCenterLeaderboardFormatterToJSON,
    GameCenterLeaderboardFormatterToJSONTyped,
} from './GameCenterLeaderboardFormatter';

/**
 * 
 * @export
 * @interface GameCenterLeaderboardAttributes
 */
export interface GameCenterLeaderboardAttributes {
    /**
     * 
     * @type {GameCenterLeaderboardFormatter}
     * @memberof GameCenterLeaderboardAttributes
     */
    defaultFormatter?: GameCenterLeaderboardFormatter;
    /**
     * 
     * @type {string}
     * @memberof GameCenterLeaderboardAttributes
     */
    referenceName?: string;
    /**
     * 
     * @type {string}
     * @memberof GameCenterLeaderboardAttributes
     */
    vendorIdentifier?: string;
    /**
     * 
     * @type {string}
     * @memberof GameCenterLeaderboardAttributes
     */
    submissionType?: GameCenterLeaderboardAttributesSubmissionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GameCenterLeaderboardAttributes
     */
    scoreSortType?: GameCenterLeaderboardAttributesScoreSortTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GameCenterLeaderboardAttributes
     */
    scoreRangeStart?: string;
    /**
     * 
     * @type {string}
     * @memberof GameCenterLeaderboardAttributes
     */
    scoreRangeEnd?: string;
    /**
     * 
     * @type {Date}
     * @memberof GameCenterLeaderboardAttributes
     */
    recurrenceStartDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof GameCenterLeaderboardAttributes
     */
    recurrenceDuration?: string;
    /**
     * 
     * @type {string}
     * @memberof GameCenterLeaderboardAttributes
     */
    recurrenceRule?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GameCenterLeaderboardAttributes
     */
    archived?: boolean;
}


/**
 * @export
 */
export const GameCenterLeaderboardAttributesSubmissionTypeEnum = {
    BestScore: 'BEST_SCORE',
    MostRecentScore: 'MOST_RECENT_SCORE'
} as const;
export type GameCenterLeaderboardAttributesSubmissionTypeEnum = typeof GameCenterLeaderboardAttributesSubmissionTypeEnum[keyof typeof GameCenterLeaderboardAttributesSubmissionTypeEnum];

/**
 * @export
 */
export const GameCenterLeaderboardAttributesScoreSortTypeEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GameCenterLeaderboardAttributesScoreSortTypeEnum = typeof GameCenterLeaderboardAttributesScoreSortTypeEnum[keyof typeof GameCenterLeaderboardAttributesScoreSortTypeEnum];


/**
 * Check if a given object implements the GameCenterLeaderboardAttributes interface.
 */
export function instanceOfGameCenterLeaderboardAttributes(value: object): value is GameCenterLeaderboardAttributes {
    return true;
}

export function GameCenterLeaderboardAttributesFromJSON(json: any): GameCenterLeaderboardAttributes {
    return GameCenterLeaderboardAttributesFromJSONTyped(json, false);
}

export function GameCenterLeaderboardAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameCenterLeaderboardAttributes {
    if (json == null) {
        return json;
    }
    return {
        
        'defaultFormatter': json['defaultFormatter'] == null ? undefined : GameCenterLeaderboardFormatterFromJSON(json['defaultFormatter']),
        'referenceName': json['referenceName'] == null ? undefined : json['referenceName'],
        'vendorIdentifier': json['vendorIdentifier'] == null ? undefined : json['vendorIdentifier'],
        'submissionType': json['submissionType'] == null ? undefined : json['submissionType'],
        'scoreSortType': json['scoreSortType'] == null ? undefined : json['scoreSortType'],
        'scoreRangeStart': json['scoreRangeStart'] == null ? undefined : json['scoreRangeStart'],
        'scoreRangeEnd': json['scoreRangeEnd'] == null ? undefined : json['scoreRangeEnd'],
        'recurrenceStartDate': json['recurrenceStartDate'] == null ? undefined : (new Date(json['recurrenceStartDate'])),
        'recurrenceDuration': json['recurrenceDuration'] == null ? undefined : json['recurrenceDuration'],
        'recurrenceRule': json['recurrenceRule'] == null ? undefined : json['recurrenceRule'],
        'archived': json['archived'] == null ? undefined : json['archived'],
    };
}

export function GameCenterLeaderboardAttributesToJSON(json: any): GameCenterLeaderboardAttributes {
    return GameCenterLeaderboardAttributesToJSONTyped(json, false);
}

export function GameCenterLeaderboardAttributesToJSONTyped(value?: GameCenterLeaderboardAttributes | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'defaultFormatter': GameCenterLeaderboardFormatterToJSON(value['defaultFormatter']),
        'referenceName': value['referenceName'],
        'vendorIdentifier': value['vendorIdentifier'],
        'submissionType': value['submissionType'],
        'scoreSortType': value['scoreSortType'],
        'scoreRangeStart': value['scoreRangeStart'],
        'scoreRangeEnd': value['scoreRangeEnd'],
        'recurrenceStartDate': value['recurrenceStartDate'] == null ? undefined : ((value['recurrenceStartDate']).toISOString()),
        'recurrenceDuration': value['recurrenceDuration'],
        'recurrenceRule': value['recurrenceRule'],
        'archived': value['archived'],
    };
}

