/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GameCenterLeaderboardEntrySubmissionAttributes } from './GameCenterLeaderboardEntrySubmissionAttributes';
import {
    GameCenterLeaderboardEntrySubmissionAttributesFromJSON,
    GameCenterLeaderboardEntrySubmissionAttributesFromJSONTyped,
    GameCenterLeaderboardEntrySubmissionAttributesToJSON,
    GameCenterLeaderboardEntrySubmissionAttributesToJSONTyped,
} from './GameCenterLeaderboardEntrySubmissionAttributes';
import type { ResourceLinks } from './ResourceLinks';
import {
    ResourceLinksFromJSON,
    ResourceLinksFromJSONTyped,
    ResourceLinksToJSON,
    ResourceLinksToJSONTyped,
} from './ResourceLinks';

/**
 * 
 * @export
 * @interface GameCenterLeaderboardEntrySubmission
 */
export interface GameCenterLeaderboardEntrySubmission {
    /**
     * 
     * @type {string}
     * @memberof GameCenterLeaderboardEntrySubmission
     */
    type: GameCenterLeaderboardEntrySubmissionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GameCenterLeaderboardEntrySubmission
     */
    id: string;
    /**
     * 
     * @type {GameCenterLeaderboardEntrySubmissionAttributes}
     * @memberof GameCenterLeaderboardEntrySubmission
     */
    attributes?: GameCenterLeaderboardEntrySubmissionAttributes;
    /**
     * 
     * @type {ResourceLinks}
     * @memberof GameCenterLeaderboardEntrySubmission
     */
    links?: ResourceLinks;
}


/**
 * @export
 */
export const GameCenterLeaderboardEntrySubmissionTypeEnum = {
    GameCenterLeaderboardEntrySubmissions: 'gameCenterLeaderboardEntrySubmissions'
} as const;
export type GameCenterLeaderboardEntrySubmissionTypeEnum = typeof GameCenterLeaderboardEntrySubmissionTypeEnum[keyof typeof GameCenterLeaderboardEntrySubmissionTypeEnum];


/**
 * Check if a given object implements the GameCenterLeaderboardEntrySubmission interface.
 */
export function instanceOfGameCenterLeaderboardEntrySubmission(value: object): value is GameCenterLeaderboardEntrySubmission {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function GameCenterLeaderboardEntrySubmissionFromJSON(json: any): GameCenterLeaderboardEntrySubmission {
    return GameCenterLeaderboardEntrySubmissionFromJSONTyped(json, false);
}

export function GameCenterLeaderboardEntrySubmissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameCenterLeaderboardEntrySubmission {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'id': json['id'],
        'attributes': json['attributes'] == null ? undefined : GameCenterLeaderboardEntrySubmissionAttributesFromJSON(json['attributes']),
        'links': json['links'] == null ? undefined : ResourceLinksFromJSON(json['links']),
    };
}

export function GameCenterLeaderboardEntrySubmissionToJSON(json: any): GameCenterLeaderboardEntrySubmission {
    return GameCenterLeaderboardEntrySubmissionToJSONTyped(json, false);
}

export function GameCenterLeaderboardEntrySubmissionToJSONTyped(value?: GameCenterLeaderboardEntrySubmission | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'id': value['id'],
        'attributes': GameCenterLeaderboardEntrySubmissionAttributesToJSON(value['attributes']),
        'links': ResourceLinksToJSON(value['links']),
    };
}

